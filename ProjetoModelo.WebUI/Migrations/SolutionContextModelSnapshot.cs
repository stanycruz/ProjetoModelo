// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoModelo.WebUI.Data;

namespace ProjetoModelo.WebUI.Migrations
{
    [DbContext(typeof(SolutionContext))]
    partial class SolutionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Anthropometric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageThigh")
                        .HasColumnName("coxa_media");

                    b.Property<double>("ContractedArm")
                        .HasColumnName("braco_contraido");

                    b.Property<double>("Forearm")
                        .HasColumnName("antebraco");

                    b.Property<double>("Hip")
                        .HasColumnName("quadril");

                    b.Property<double>("Leg")
                        .HasColumnName("perna");

                    b.Property<double>("LowerThigh")
                        .HasColumnName("coxa_inferior");

                    b.Property<double>("Neck")
                        .HasColumnName("pescoco");

                    b.Property<double>("RelaxedArm")
                        .HasColumnName("braco_relaxado");

                    b.Property<double>("Thoracic")
                        .HasColumnName("toracica");

                    b.Property<double>("UpperThigh")
                        .HasColumnName("coxa_superior");

                    b.Property<double>("Waist")
                        .HasColumnName("cintura");

                    b.Property<long>("avaliacao_fisica_id");

                    b.HasKey("Id");

                    b.HasIndex("avaliacao_fisica_id");

                    b.ToTable("antopometrica");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Circumference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Calf")
                        .HasColumnName("panturrilha");

                    b.Property<double>("EMTrunk")
                        .HasColumnName("troncoEM");

                    b.Property<double>("Gluteal")
                        .HasColumnName("glutea");

                    b.Property<double>("IMTrunk")
                        .HasColumnName("troncoIM");

                    b.Property<double>("Maleoar")
                        .HasColumnName("maleoar");

                    b.Property<long?>("avaliacao_fisica_id");

                    b.HasKey("Id");

                    b.HasIndex("avaliacao_fisica_id");

                    b.ToTable("circunferencia");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Diameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AnteriorThoracic")
                        .HasColumnName("toracico_anterior");

                    b.Property<double>("Biacromial")
                        .HasColumnName("biacromial");

                    b.Property<double>("Bicristal")
                        .HasColumnName("bicristal");

                    b.Property<double>("Bitrocanterian")
                        .HasColumnName("bitrocanteriano");

                    b.Property<double>("Femular")
                        .HasColumnName("femular");

                    b.Property<double>("Maleolar")
                        .HasColumnName("maleolar");

                    b.Property<double>("PosteriorThoracic")
                        .HasColumnName("toracico_posterior");

                    b.Property<double>("RadioUlnar")
                        .HasColumnName("radio_ulnar");

                    b.Property<double>("TransverseThoracic")
                        .HasColumnName("toracico_transversal");

                    b.Property<double>("Umeral")
                        .HasColumnName("umeral");

                    b.Property<long?>("avaliacao_fisica_id");

                    b.HasKey("Id");

                    b.HasIndex("avaliacao_fisica_id");

                    b.ToTable("diametro");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Frequency", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnName("aluno_id");

                    b.Property<DateTime>("DateEntry")
                        .HasColumnName("data_entrada")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnName("data_saida")
                        .HasColumnType("datetime");

                    b.HasKey("StudentId");

                    b.ToTable("frequencia");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Modality", b =>
                {
                    b.Property<long>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("matricula_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Value")
                        .HasColumnName("valor")
                        .HasColumnType("money");

                    b.HasKey("RegistrationId");

                    b.ToTable("modalidade");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Payment", b =>
                {
                    b.Property<long>("RegistrationId")
                        .HasColumnName("matricula_id");

                    b.Property<string>("FormPayment")
                        .IsRequired()
                        .HasColumnName("forma_pagamento")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Historic")
                        .HasColumnName("historico");

                    b.Property<DateTime>("Payday")
                        .HasColumnName("data_pagamento")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnName("valor_pago")
                        .HasColumnType("money");

                    b.Property<string>("Period")
                        .HasColumnName("periodo");

                    b.Property<decimal>("Value")
                        .HasColumnName("valor")
                        .HasColumnType("money");

                    b.HasKey("RegistrationId");

                    b.ToTable("pagamento");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.PhysicalEvaluation", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnName("aluno_id");

                    b.Property<int>("Abdominal")
                        .HasColumnName("abdominal");

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("data")
                        .HasColumnType("datetime");

                    b.Property<int>("FlexionArms")
                        .HasColumnName("flexao_bracos");

                    b.Property<int>("HeartRate")
                        .HasColumnName("frequencia_cardiaca");

                    b.Property<double>("Height")
                        .HasColumnName("altura");

                    b.Property<string>("Valuer")
                        .IsRequired()
                        .HasColumnName("avaliador")
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Weight")
                        .HasColumnName("peso");

                    b.HasKey("StudentId");

                    b.ToTable("avaliacao_fisica");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Registration", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnName("aluno_id");

                    b.Property<double>("Discount")
                        .HasColumnName("desconto");

                    b.Property<DateTime>("DueDate")
                        .HasColumnName("data_vencimento")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnName("data_vigencia")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("data_fim")
                        .HasColumnType("datetime");

                    b.Property<double>("FinalValue")
                        .HasColumnName("valor_final");

                    b.Property<long?>("ModalityRegistrationId");

                    b.Property<string>("Plan")
                        .HasColumnName("plano");

                    b.Property<string>("Situation")
                        .HasColumnName("situacao")
                        .HasColumnType("varchar(20)");

                    b.HasKey("StudentId");

                    b.HasIndex("ModalityRegistrationId");

                    b.ToTable("matricula");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.SkinFold", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AxillaryMeanOblique")
                        .HasColumnName("axilar_media_obliqua");

                    b.Property<double>("AxillaryMeanVertical")
                        .HasColumnName("axilar_media_vertical");

                    b.Property<double>("Biceps")
                        .HasColumnName("biceps");

                    b.Property<double>("Breastplate")
                        .HasColumnName("peitoral");

                    b.Property<double>("HorizontalAbdominal")
                        .HasColumnName("abdominal_horizontal");

                    b.Property<double>("Subescapular")
                        .HasColumnName("subescapular");

                    b.Property<double>("SupraIliacOblique")
                        .HasColumnName("supra_iliaca_obliqua");

                    b.Property<double>("SupraIliacVertical")
                        .HasColumnName("supra_iliaca_vertical");

                    b.Property<double>("SupraSpinal")
                        .HasColumnName("supra_espinhal");

                    b.Property<double>("Thigh")
                        .HasColumnName("coxa");

                    b.Property<double>("Triceps")
                        .HasColumnName("triceps");

                    b.Property<double>("VerticalAbdominal")
                        .HasColumnName("abdominal_vertical");

                    b.Property<long?>("avaliacao_fisica_id");

                    b.HasKey("Id");

                    b.HasIndex("avaliacao_fisica_id");

                    b.ToTable("dobra_cutanea");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("endereco")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Age")
                        .HasColumnName("idade");

                    b.Property<DateTime>("BornDate")
                        .HasColumnName("data_nascimento")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasColumnName("cidade")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("genero")
                        .HasColumnType("char(1)");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnName("rg")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnName("estado_civil")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnName("bairro")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Objective")
                        .HasColumnName("objetivo");

                    b.Property<decimal>("Payment")
                        .HasColumnName("pagamento")
                        .HasColumnType("money");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnName("fone1")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasColumnName("fone2")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnName("profissao")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Registered")
                        .HasColumnName("matriculado");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnName("data_cadastro")
                        .HasColumnType("datetime");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnName("cpf")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("uf")
                        .HasColumnType("varchar(2)");

                    b.Property<int?>("WorkoutSheetStudentId");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnName("cep")
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutSheetStudentId");

                    b.ToTable("aluno");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.WorkoutSheet", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("aluno_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coach")
                        .HasColumnName("professor")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("data")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DayA")
                        .HasColumnName("dia_a")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DayB")
                        .HasColumnName("dia_b")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DayC")
                        .HasColumnName("dia_c")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DayD")
                        .HasColumnName("dia_d")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DayE")
                        .HasColumnName("dia_e")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DayF")
                        .HasColumnName("dia_f")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkoutA")
                        .HasColumnName("treino_a");

                    b.Property<string>("WorkoutB")
                        .HasColumnName("treino_b");

                    b.Property<string>("WorkoutC")
                        .HasColumnName("treino_c");

                    b.Property<string>("WorkoutD")
                        .HasColumnName("treino_d");

                    b.Property<string>("WorkoutE")
                        .HasColumnName("treino_e");

                    b.Property<string>("WorkoutF")
                        .HasColumnName("treino_f");

                    b.HasKey("StudentId");

                    b.ToTable("ficha_treino");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Anthropometric", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.PhysicalEvaluation", "PhysicalEvaluationId")
                        .WithMany("Anthropometrics")
                        .HasForeignKey("avaliacao_fisica_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Circumference", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.PhysicalEvaluation", "PhysicalEvaluationId")
                        .WithMany("Circumferences")
                        .HasForeignKey("avaliacao_fisica_id");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Diameter", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.PhysicalEvaluation", "PhysicalEvaluationId")
                        .WithMany("Diameters")
                        .HasForeignKey("avaliacao_fisica_id");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Frequency", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.Student")
                        .WithOne("Frequency")
                        .HasForeignKey("ProjetoModelo.WebUI.Models.Frequency", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Payment", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.Registration")
                        .WithOne("Payment")
                        .HasForeignKey("ProjetoModelo.WebUI.Models.Payment", "RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.PhysicalEvaluation", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.Student")
                        .WithOne("PhysicalEvaluation")
                        .HasForeignKey("ProjetoModelo.WebUI.Models.PhysicalEvaluation", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Registration", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.Modality", "Modality")
                        .WithMany()
                        .HasForeignKey("ModalityRegistrationId");

                    b.HasOne("ProjetoModelo.WebUI.Models.Student")
                        .WithOne("Registration")
                        .HasForeignKey("ProjetoModelo.WebUI.Models.Registration", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.SkinFold", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.PhysicalEvaluation", "PhysicalEvaluationId")
                        .WithMany("SkinFolds")
                        .HasForeignKey("avaliacao_fisica_id");
                });

            modelBuilder.Entity("ProjetoModelo.WebUI.Models.Student", b =>
                {
                    b.HasOne("ProjetoModelo.WebUI.Models.WorkoutSheet", "WorkoutSheet")
                        .WithMany()
                        .HasForeignKey("WorkoutSheetStudentId");
                });
#pragma warning restore 612, 618
        }
    }
}
